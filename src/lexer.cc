/* Generated by re2c 0.13.5 on Sun Aug 26 12:49:59 2012 */
#line 1 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
// Copyright 2011 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "lexer.h"

#include <stdio.h>

#include "eval_env.h"
#include "util.h"

bool Lexer::Error(const string& message, string* err) {
  // Compute line/column.
  int line = 1;
  const char* context = input_.str_;
  for (const char* p = input_.str_; p < last_token_; ++p) {
    if (*p == '\n') {
      ++line;
      context = p + 1;
    }
  }
  int col = last_token_ ? (int)(last_token_ - context) : 0;

  char buf[1024];
  snprintf(buf, sizeof(buf), "%s:%d: ", filename_.AsString().c_str(), line);
  *err = buf;
  *err += message + "\n";

  // Add some context to the message.
  const int kTruncateColumn = 72;
  if (col > 0 && col < kTruncateColumn) {
    int len;
    bool truncated = true;
    for (len = 0; len < kTruncateColumn; ++len) {
      if (context[len] == 0 || context[len] == '\n') {
        truncated = false;
        break;
      }
    }
    *err += string(context, len);
    if (truncated)
      *err += "...";
    *err += "\n";
    *err += string(col, ' ');
    *err += "^ near here";
  }

  return false;
}

Lexer::Lexer(const char* input) {
  Start("input", input);
}

void Lexer::Start(StringPiece filename, StringPiece input) {
  filename_ = filename;
  input_ = input;
  ofs_ = input_.str_;
  last_token_ = NULL;
}

const char* Lexer::TokenName(Token t) {
  switch (t) {
  case ERROR:    return "lexing error";
  case BUILD:    return "'build'";
  case COLON:    return "':'";
  case DEFAULT:  return "'default'";
  case EQUALS:   return "'='";
  case IDENT:    return "identifier";
  case INCLUDE:  return "'include'";
  case INDENT:   return "indent";
  case NEWLINE:  return "newline";
  case PIPE2:    return "'||'";
  case PIPE:     return "'|'";
  case RULE:     return "'rule'";
  case SUBNINJA: return "'subninja'";
  case TEOF:     return "eof";
  }
  return NULL;  // not reached
}

const char* Lexer::TokenErrorHint(Token expected) {
  switch (expected) {
  case COLON:
    return " ($ also escapes ':')";
  default:
    return "";
  }
}

string Lexer::DescribeLastError() {
  if (last_token_) {
    switch (last_token_[0]) {
    case '\r':
      return "carriage returns are not allowed, use newlines";
    case '\t':
      return "tabs are not allowed, use spaces";
    }
  }
  return "lexing error";
}

void Lexer::UnreadToken() {
  ofs_ = last_token_;
}

Lexer::Token Lexer::ReadToken() {
  const char* p = ofs_;
  const char* q;
  const char* start;
  Lexer::Token token;
  for (;;) {
    start = p;
    
#line 128 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;

	yych = *p;
	switch (yych) {
	case 0x00:	goto yy21;
	case '\n':	goto yy6;
	case ' ':	goto yy2;
	case '#':	goto yy4;
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'c':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy20;
	case ':':	goto yy14;
	case '=':	goto yy12;
	case 'b':	goto yy8;
	case 'd':	goto yy11;
	case 'i':	goto yy18;
	case 'r':	goto yy10;
	case 's':	goto yy19;
	case '|':	goto yy16;
	default:	goto yy23;
	}
yy2:
	yyaccept = 0;
	yych = *(q = ++p);
	goto yy65;
yy3:
#line 136 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = INDENT;   break; }
#line 216 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy4:
	yyaccept = 1;
	yych = *(q = ++p);
	switch (yych) {
	case 0x00:
	case '\r':	goto yy5;
	default:	goto yy60;
	}
yy5:
#line 148 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = ERROR;    break; }
#line 228 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy6:
	++p;
yy7:
#line 135 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = NEWLINE;  break; }
#line 234 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy8:
	++p;
	switch ((yych = *p)) {
	case 'u':	goto yy54;
	default:	goto yy25;
	}
yy9:
#line 146 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = IDENT;    break; }
#line 244 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy10:
	yych = *++p;
	switch (yych) {
	case 'u':	goto yy50;
	default:	goto yy25;
	}
yy11:
	yych = *++p;
	switch (yych) {
	case 'e':	goto yy43;
	default:	goto yy25;
	}
yy12:
	++p;
#line 140 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = EQUALS;   break; }
#line 261 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy14:
	++p;
#line 141 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = COLON;    break; }
#line 266 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy16:
	++p;
	switch ((yych = *p)) {
	case '|':	goto yy41;
	default:	goto yy17;
	}
yy17:
#line 143 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = PIPE;     break; }
#line 276 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy18:
	yych = *++p;
	switch (yych) {
	case 'n':	goto yy34;
	default:	goto yy25;
	}
yy19:
	yych = *++p;
	switch (yych) {
	case 'u':	goto yy26;
	default:	goto yy25;
	}
yy20:
	yych = *++p;
	goto yy25;
yy21:
	++p;
#line 147 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = TEOF;     break; }
#line 296 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy23:
	yych = *++p;
	goto yy5;
yy24:
	++p;
	yych = *p;
yy25:
	switch (yych) {
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy9;
	}
yy26:
	yych = *++p;
	switch (yych) {
	case 'b':	goto yy27;
	default:	goto yy25;
	}
yy27:
	yych = *++p;
	switch (yych) {
	case 'n':	goto yy28;
	default:	goto yy25;
	}
yy28:
	yych = *++p;
	switch (yych) {
	case 'i':	goto yy29;
	default:	goto yy25;
	}
yy29:
	yych = *++p;
	switch (yych) {
	case 'n':	goto yy30;
	default:	goto yy25;
	}
yy30:
	yych = *++p;
	switch (yych) {
	case 'j':	goto yy31;
	default:	goto yy25;
	}
yy31:
	yych = *++p;
	switch (yych) {
	case 'a':	goto yy32;
	default:	goto yy25;
	}
yy32:
	++p;
	switch ((yych = *p)) {
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy33;
	}
yy33:
#line 145 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = SUBNINJA; break; }
#line 481 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy34:
	yych = *++p;
	switch (yych) {
	case 'c':	goto yy35;
	default:	goto yy25;
	}
yy35:
	yych = *++p;
	switch (yych) {
	case 'l':	goto yy36;
	default:	goto yy25;
	}
yy36:
	yych = *++p;
	switch (yych) {
	case 'u':	goto yy37;
	default:	goto yy25;
	}
yy37:
	yych = *++p;
	switch (yych) {
	case 'd':	goto yy38;
	default:	goto yy25;
	}
yy38:
	yych = *++p;
	switch (yych) {
	case 'e':	goto yy39;
	default:	goto yy25;
	}
yy39:
	++p;
	switch ((yych = *p)) {
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy40;
	}
yy40:
#line 144 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = INCLUDE;  break; }
#line 585 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy41:
	++p;
#line 142 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = PIPE2;    break; }
#line 590 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy43:
	yych = *++p;
	switch (yych) {
	case 'f':	goto yy44;
	default:	goto yy25;
	}
yy44:
	yych = *++p;
	switch (yych) {
	case 'a':	goto yy45;
	default:	goto yy25;
	}
yy45:
	yych = *++p;
	switch (yych) {
	case 'u':	goto yy46;
	default:	goto yy25;
	}
yy46:
	yych = *++p;
	switch (yych) {
	case 'l':	goto yy47;
	default:	goto yy25;
	}
yy47:
	yych = *++p;
	switch (yych) {
	case 't':	goto yy48;
	default:	goto yy25;
	}
yy48:
	++p;
	switch ((yych = *p)) {
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy49;
	}
yy49:
#line 139 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = DEFAULT;  break; }
#line 694 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy50:
	yych = *++p;
	switch (yych) {
	case 'l':	goto yy51;
	default:	goto yy25;
	}
yy51:
	yych = *++p;
	switch (yych) {
	case 'e':	goto yy52;
	default:	goto yy25;
	}
yy52:
	++p;
	switch ((yych = *p)) {
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy53;
	}
yy53:
#line 138 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = RULE;     break; }
#line 780 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy54:
	yych = *++p;
	switch (yych) {
	case 'i':	goto yy55;
	default:	goto yy25;
	}
yy55:
	yych = *++p;
	switch (yych) {
	case 'l':	goto yy56;
	default:	goto yy25;
	}
yy56:
	yych = *++p;
	switch (yych) {
	case 'd':	goto yy57;
	default:	goto yy25;
	}
yy57:
	++p;
	switch ((yych = *p)) {
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy58;
	}
yy58:
#line 137 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ token = BUILD;    break; }
#line 872 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy59:
	++p;
	yych = *p;
yy60:
	switch (yych) {
	case 0x00:
	case '\r':	goto yy61;
	case '\n':	goto yy62;
	default:	goto yy59;
	}
yy61:
	p = q;
	switch (yyaccept) {
	case 0: 	goto yy3;
	case 1: 	goto yy5;
	}
yy62:
	++p;
#line 134 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ continue; }
#line 893 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy64:
	yyaccept = 0;
	q = ++p;
	yych = *p;
yy65:
	switch (yych) {
	case '\n':	goto yy66;
	case ' ':	goto yy64;
	case '#':	goto yy59;
	default:	goto yy3;
	}
yy66:
	++p;
	yych = *p;
	goto yy7;
}
#line 149 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"

  }

  last_token_ = start;
  ofs_ = p;
  if (token != NEWLINE && token != TEOF)
    EatWhitespace();
  return token;
}

bool Lexer::PeekToken(Token token) {
  Token t = ReadToken();
  if (t == token)
    return true;
  UnreadToken();
  return false;
}

void Lexer::EatWhitespace() {
  const char* p = ofs_;
  for (;;) {
    ofs_ = p;
    
#line 934 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
{
	unsigned char yych;
	yych = *p;
	switch (yych) {
	case 0x00:	goto yy73;
	case ' ':	goto yy69;
	case '$':	goto yy71;
	default:	goto yy75;
	}
yy69:
	++p;
	yych = *p;
	goto yy79;
yy70:
#line 172 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ continue; }
#line 951 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy71:
	++p;
	switch ((yych = *p)) {
	case '\n':	goto yy76;
	default:	goto yy72;
	}
yy72:
#line 175 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ break; }
#line 961 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy73:
	++p;
#line 174 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ break; }
#line 966 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy75:
	yych = *++p;
	goto yy72;
yy76:
	++p;
#line 173 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ continue; }
#line 974 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy78:
	++p;
	yych = *p;
yy79:
	switch (yych) {
	case ' ':	goto yy78;
	default:	goto yy70;
	}
}
#line 176 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"

  }
}

bool Lexer::ReadIdent(string* out) {
  const char* p = ofs_;
  for (;;) {
    const char* start = p;
    
#line 994 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
{
	unsigned char yych;
	yych = *p;
	switch (yych) {
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy82;
	default:	goto yy84;
	}
yy82:
	++p;
	yych = *p;
	goto yy87;
yy83:
#line 185 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      out->assign(start, p - start);
      break;
    }
#line 1076 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy84:
	++p;
#line 189 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{ return false; }
#line 1081 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy86:
	++p;
	yych = *p;
yy87:
	switch (yych) {
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy86;
	default:	goto yy83;
	}
}
#line 190 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"

  }
  ofs_ = p;
  EatWhitespace();
  return true;
}

bool Lexer::ReadEvalString(EvalString* eval, bool path, string* err) {
  const char* p = ofs_;
  const char* q;
  const char* start;
  for (;;) {
    start = p;
    
#line 1170 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
{
	unsigned char yych;
	yych = *p;
	switch (yych) {
	case 0x00:	goto yy96;
	case '\n':
	case ' ':
	case ':':
	case '|':	goto yy92;
	case '\r':	goto yy98;
	case '$':	goto yy94;
	default:	goto yy90;
	}
yy90:
	++p;
	yych = *p;
	goto yy121;
yy91:
#line 204 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      eval->AddText(StringPiece(start, p - start));
      continue;
    }
#line 1194 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy92:
	++p;
#line 208 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      if (path) {
        p = start;
        break;
      } else {
        if (*start == '\n')
          break;
        eval->AddText(StringPiece(start, 1));
        continue;
      }
    }
#line 1209 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy94:
	++p;
	switch ((yych = *p)) {
	case '\n':	goto yy110;
	case ' ':	goto yy101;
	case '$':	goto yy103;
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy105;
	case ':':	goto yy107;
	case '{':	goto yy109;
	default:	goto yy99;
	}
yy95:
#line 250 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      last_token_ = start;
      return Error(DescribeLastError(), err);
    }
#line 1290 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy96:
	++p;
#line 246 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      last_token_ = start;
      return Error("unexpected EOF", err);
    }
#line 1298 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy98:
	yych = *++p;
	goto yy95;
yy99:
	++p;
yy100:
#line 242 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      last_token_ = start;
      return Error("bad $-escape (literal $ must be written as $$)", err);
    }
#line 1310 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy101:
	++p;
#line 223 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      eval->AddText(StringPiece(" ", 1));
      continue;
    }
#line 1318 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy103:
	++p;
#line 219 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      eval->AddText(StringPiece("$", 1));
      continue;
    }
#line 1326 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy105:
	++p;
	yych = *p;
	goto yy119;
yy106:
#line 234 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      eval->AddSpecial(StringPiece(start + 1, p - start - 1));
      continue;
    }
#line 1337 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy107:
	++p;
#line 238 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      eval->AddText(StringPiece(":", 1));
      continue;
    }
#line 1345 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy109:
	yych = *(q = ++p);
	switch (yych) {
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy113;
	default:	goto yy100;
	}
yy110:
	++p;
	yych = *p;
	switch (yych) {
	case ' ':	goto yy110;
	default:	goto yy112;
	}
yy112:
#line 227 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      continue;
    }
#line 1428 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy113:
	++p;
	yych = *p;
	switch (yych) {
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy113;
	case '}':	goto yy116;
	default:	goto yy115;
	}
yy115:
	p = q;
	goto yy100;
yy116:
	++p;
#line 230 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"
	{
      eval->AddSpecial(StringPiece(start + 2, p - start - 3));
      continue;
    }
#line 1511 "/Users/clausklein/Downloads/ninja/src/lexer.cc"
yy118:
	++p;
	yych = *p;
yy119:
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy118;
	default:	goto yy106;
	}
yy120:
	++p;
	yych = *p;
yy121:
	switch (yych) {
	case 0x00:
	case '\n':
	case '\r':
	case ' ':
	case '$':
	case ':':
	case '|':	goto yy91;
	default:	goto yy120;
	}
}
#line 254 "/Users/clausklein/Downloads/ninja/src/lexer.in.cc"

  }
  last_token_ = start;
  ofs_ = p;
  if (path)
    EatWhitespace();
  // Non-path strings end in newlines, so there's no whitespace to eat.
  return true;
}
